@page "/review"
@using AI_Powered_Code_Review_Assistant.Interfaces
@using AI_Powered_Code_Review_Assistant.Models
@inject ICodeReviewService CodeReviewService
@inject IGitService GitService
@inject IJSRuntime JSRuntime
@inject NavigationManager Navigation

<PageTitle>AI Code Review</PageTitle>

<div class="container py-5">
    <div class="text-center mb-5">
        <h1 class="fw-bold text-gradient">AI Code Review Assistant</h1>
        <p class="text-muted fs-5">Intelligent analysis for security, quality, and maintainability</p>
    </div>

    <!-- Tabs for Input Selection -->
    <div class="card shadow-lg border-0 rounded-4">
        <div class="card-header bg-light border-0">
            <ul class="nav nav-pills justify-content-center" role="tablist">
                <li class="nav-item">
                    <button class="nav-link @(activeTab == "repository" ? "active" : "")"
                            @onclick='() => SetActiveTab("repository")'>
                        <i class="fas fa-code-branch me-2"></i>Git Repository
                    </button>
                </li>
                <li class="nav-item">
                    <button class="nav-link @(activeTab == "files" ? "active" : "")"
                            @onclick='() => SetActiveTab("files")'>
                        <i class="fas fa-file-code me-2"></i>Upload Files
                    </button>
                </li>
                <li class="nav-item">
                    <button class="nav-link @(activeTab == "directory" ? "active" : "")"
                            @onclick='() => SetActiveTab("directory")'>
                        <i class="fas fa-folder me-2"></i>Local Directory
                    </button>
                </li>
            </ul>
        </div>

        <div class="card-body p-4">
            @if (!string.IsNullOrEmpty(errorMessage))
            {
                <div class="alert alert-danger" role="alert">
                    <i class="fas fa-exclamation-triangle me-2"></i>@errorMessage
                </div>
            }

            @if (activeTab == "repository")
            {
                <EditForm Model="@reviewRequest" OnValidSubmit="@ReviewRepository">
                    <div class="mb-3">
                        <label class="form-label fw-semibold">Repository Path</label>
                        <div class="input-group">
                            <InputText class="form-control rounded-start"
                                       @bind-value="reviewRequest.RepositoryPath"
                                       placeholder="C:/path/to/repository"
                                       disabled="@isProcessing" />
                            <button type="button" class="btn btn-outline-secondary" @onclick="BrowseForRepository" disabled="@isProcessing">
                                <i class="fas fa-folder-open"></i>
                            </button>
                        </div>
                        <small class="text-muted">Enter the path to your Git repository</small>
                    </div>

                    <div class="row">
                        <div class="col-md-6">
                            <label class="form-label fw-semibold">Review Type</label>
                            <InputSelect class="form-select" @bind-value="reviewRequest.ReviewType" disabled="@isProcessing">
                                <option value="directory">Full Repository</option>
                                <option value="commit">Specific Commit</option>
                                <option value="changes">Uncommitted Changes</option>
                            </InputSelect>
                        </div>
                        <div class="col-md-6">
                            @if (reviewRequest.ReviewType == "commit")
                            {
                                <label class="form-label fw-semibold">Commit Hash</label>
                                <InputText class="form-control" @bind-value="reviewRequest.CommitHash"
                                           placeholder="abc123..."
                                           disabled="@isProcessing" />
                            }
                        </div>
                    </div>

                    <div class="d-grid mt-4">
                        <button type="submit" class="btn btn-primary btn-lg shadow" disabled="@isProcessing">
                            @if (isProcessing)
                            {
                                <span class="spinner-border spinner-border-sm me-2" role="status" aria-hidden="true"></span>
                                <span>Analyzing...</span>
                            }
                            else
                            {
                                <i class="fas fa-play me-2"></i>
                                <span>Start Analysis</span>
                            }
                        </button>
                    </div>
                </EditForm>
            }
            else if (activeTab == "files")
            {
                <div class="upload-zone text-center p-5 border rounded-4 bg-light position-relative">
                    <InputFile @ref="fileInput" OnChange="OnFileSelected" multiple accept=".cs,.js,.ts,.py,.java,.cpp,.c,.h,.hpp,.html,.css,.jsx,.tsx,.php,.rb,.go,.rs,.swift,.kt,.scala,.sql,.xml,.json,.yaml,.yml" style="display: none;" disabled="@isProcessing" />

                    @if (uploadedFiles.Any())
                    {
                        <div class="mb-3">
                            <h6 class="fw-semibold">Selected Files:</h6>
                            <div class="list-group list-group-flush">
                                @foreach (var file in uploadedFiles.Keys)
                                {
                                    <div class="list-group-item d-flex justify-content-between align-items-center">
                                        <span><i class="fas fa-file-code me-2"></i>@file</span>
                                        <button type="button" class="btn btn-sm btn-outline-danger" @onclick="() => RemoveFile(file)" disabled="@isProcessing">
                                            <i class="fas fa-times"></i>
                                        </button>
                                    </div>
                                }
                            </div>
                        </div>
                    }

                    <i class="fas fa-cloud-upload-alt fa-3x text-primary mb-3"></i>
                    <h5 class="fw-semibold">Upload Code Files</h5>
                    <p class="text-muted">Drag & drop files here or click to browse</p>

                    <div class="d-flex flex-column gap-2">
                        <button type="button" class="btn btn-primary" @onclick="TriggerFileInput" disabled="@isProcessing">
                            <i class="fas fa-file-plus me-2"></i>Choose Files
                        </button>

                        @if (uploadedFiles.Any())
                        {
                            <button type="button" class="btn btn-success btn-lg" @onclick="ReviewUploadedFiles" disabled="@isProcessing">
                                @if (isProcessing)
                                {
                                    <span class="spinner-border spinner-border-sm me-2" role="status" aria-hidden="true"></span>
                                    <span>Analyzing...</span>
                                }
                                else
                                {
                                    <i class="fas fa-play me-2"></i>
                                    <span>Analyze Files (@uploadedFiles.Count)</span>
                                }
                            </button>
                        }
                    </div>
                </div>
            }
            else if (activeTab == "directory")
            {
                <EditForm Model="@reviewRequest" OnValidSubmit="@ReviewDirectory">
                    <label class="form-label fw-semibold">Directory Path</label>
                    <div class="input-group">
                        <InputText class="form-control" @bind-value="reviewRequest.DirectoryPath"
                                   placeholder="C:/path/to/project"
                                   disabled="@isProcessing" />
                        <button type="button" class="btn btn-outline-secondary" @onclick="BrowseForDirectory" disabled="@isProcessing">
                            <i class="fas fa-folder-open"></i>
                        </button>
                    </div>
                    <small class="text-muted">Enter the path to a directory containing code files</small>
                    <div class="d-grid mt-4">
                        <button type="submit" class="btn btn-primary btn-lg shadow" disabled="@isProcessing">
                            @if (isProcessing)
                            {
                                <span class="spinner-border spinner-border-sm me-2" role="status" aria-hidden="true"></span>
                                <span>Analyzing...</span>
                            }
                            else
                            {
                                <i class="fas fa-search me-2"></i>
                                <span>Analyze Directory</span>
                            }
                        </button>
                    </div>
                </EditForm>
            }
        </div>
    </div>
</div>

@code {
    private ReviewRequest reviewRequest = new();
    private string activeTab = "repository";
    private bool isProcessing = false;
    private string? errorMessage;
    private InputFile? fileInput;
    private Dictionary<string, string> uploadedFiles = new();

    private void SetActiveTab(string tab) => activeTab = tab;

    private async Task ReviewRepository()
    {
        if (string.IsNullOrWhiteSpace(reviewRequest.RepositoryPath))
        {
            errorMessage = "Please provide a repository path.";
            return;
        }

        isProcessing = true;
        errorMessage = null;
        StateHasChanged();

        try
        {
            ReviewResult result;

            switch (reviewRequest.ReviewType)
            {
                case "commit":
                    if (string.IsNullOrWhiteSpace(reviewRequest.CommitHash))
                    {
                        errorMessage = "Please provide a commit hash.";
                        return;
                    }
                    result = await CodeReviewService.ReviewCommitAsync(reviewRequest.RepositoryPath, reviewRequest.CommitHash);
                    break;
                case "changes":
                    // For uncommitted changes, we'll review the directory
                    result = await CodeReviewService.ReviewDirectoryAsync(reviewRequest.RepositoryPath);
                    break;
                default:
                    result = await CodeReviewService.ReviewDirectoryAsync(reviewRequest.RepositoryPath);
                    break;
            }

            // Navigate to results page with the result
            await NavigateToResults(result);
        }
        catch (Exception ex)
        {
            errorMessage = $"Error during review: {ex.Message}";
        }
        finally
        {
            isProcessing = false;
            StateHasChanged();
        }
    }

    private async Task ReviewDirectory()
    {
        if (string.IsNullOrWhiteSpace(reviewRequest.DirectoryPath))
        {
            errorMessage = "Please provide a directory path.";
            return;
        }

        isProcessing = true;
        errorMessage = null;
        StateHasChanged();

        try
        {
            var result = await CodeReviewService.ReviewDirectoryAsync(reviewRequest.DirectoryPath);
            await NavigateToResults(result);
        }
        catch (Exception ex)
        {
            errorMessage = $"Error during review: {ex.Message}";
        }
        finally
        {
            isProcessing = false;
            StateHasChanged();
        }
    }

    private async Task BrowseForRepository()
    {
        try
        {
            var selectedPath = await JSRuntime.InvokeAsync<string>("fileUploadHelper.browseForDirectory");
            if (!string.IsNullOrEmpty(selectedPath))
            {
                reviewRequest.RepositoryPath = selectedPath;
                StateHasChanged();
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error browsing for repository: {ex.Message}";
        }
    }

    private async Task BrowseForDirectory()
    {
        try
        {
            var selectedPath = await JSRuntime.InvokeAsync<string>("fileUploadHelper.browseForDirectory");
            if (!string.IsNullOrEmpty(selectedPath))
            {
                reviewRequest.DirectoryPath = selectedPath;
                StateHasChanged();
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error browsing for directory: {ex.Message}";
        }
    }

    private async Task NavigateToResults(ReviewResult result)
    {
        // Store the result in session state or pass it to the results page
        var resultJson = System.Text.Json.JsonSerializer.Serialize(result);
        await JSRuntime.InvokeVoidAsync("sessionStorage.setItem", "reviewResult", resultJson);

        // Navigate to results page
        Navigation.NavigateTo("/results");
    }

    private async Task TriggerFileInput()
    {
        if (fileInput?.Element != null)
        {
            await JSRuntime.InvokeVoidAsync("triggerFileInput", fileInput.Element);
        }
    }

    private async Task OnFileSelected(InputFileChangeEventArgs e)
    {
        errorMessage = null;
        const long maxFileSize = 1024 * 1024 * 5; // 5MB limit per file

        try
        {
            foreach (var file in e.GetMultipleFiles(20)) // Max 20 files
            {
                if (file.Size > maxFileSize)
                {
                    errorMessage = $"File {file.Name} is too large. Maximum size is 5MB.";
                    continue;
                }

                // Read file content
                using var stream = file.OpenReadStream(maxFileSize);
                using var reader = new StreamReader(stream);
                var content = await reader.ReadToEndAsync();

                uploadedFiles[file.Name] = content;
            }

            StateHasChanged();
        }
        catch (Exception ex)
        {
            errorMessage = $"Error reading files: {ex.Message}";
        }
    }

    private void RemoveFile(string fileName)
    {
        uploadedFiles.Remove(fileName);
        StateHasChanged();
    }

    private async Task ReviewUploadedFiles()
    {
        if (!uploadedFiles.Any())
        {
            errorMessage = "Please select files to review.";
            return;
        }

        isProcessing = true;
        errorMessage = null;
        StateHasChanged();

        try
        {
            var result = await CodeReviewService.ReviewFilesAsync(uploadedFiles);
            await NavigateToResults(result);
        }
        catch (Exception ex)
        {
            errorMessage = $"Error during review: {ex.Message}";
        }
        finally
        {
            isProcessing = false;
            StateHasChanged();
        }
    }

    public class ReviewRequest
    {
        public string RepositoryPath { get; set; } = "";
        public string DirectoryPath { get; set; } = "";
        public string ReviewType { get; set; } = "directory";
        public string CommitHash { get; set; } = "";
    }
}
