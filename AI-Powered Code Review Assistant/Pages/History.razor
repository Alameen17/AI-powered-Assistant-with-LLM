@page "/history"
@using AI_Powered_Code_Review_Assistant.Models
@inject IJSRuntime JSRuntime
@inject NavigationManager Navigation

<PageTitle>Review History - AI Code Review</PageTitle>

<div class="page-content">
    <div class="container">
        <!-- Premium Header -->
        <div class="text-center section-spacing fade-in-down">
            <h1 class="display-4 fw-bold text-white mb-4">
                <i class="fas fa-history me-3 float"></i>Review History
            </h1>
            <p class="lead text-white-50 mb-5" style="font-size: 1.25rem; max-width: 500px; margin: 0 auto;">
                Track your code analysis progress and discover insights from past reviews
            </p>
        </div>

        <!-- Premium Stats Cards -->
        <div class="row g-4 section-spacing fade-in-up">
            <div class="col-lg-3 col-md-6 stagger-1">
                <div class="stat-card">
                    <div class="stat-value" style="color: #4facfe;">@totalReviews</div>
                    <div class="stat-label">Total Reviews</div>
                </div>
            </div>
            <div class="col-lg-3 col-md-6 stagger-2">
                <div class="stat-card">
                    <div class="stat-value" style="color: #10b981;">@avgScore</div>
                    <div class="stat-label">Average Score</div>
                </div>
            </div>
            <div class="col-lg-3 col-md-6 stagger-3">
                <div class="stat-card">
                    <div class="stat-value" style="color: #f59e0b;">@issuesFixed</div>
                    <div class="stat-label">Issues Fixed</div>
                </div>
            </div>
            <div class="col-lg-3 col-md-6 stagger-4">
                <div class="stat-card">
                    <div class="stat-value" style="color: #06b6d4;">@timeSaved</div>
                    <div class="stat-label">Hours Saved</div>
                </div>
            </div>
        </div>

        <!-- Filter and Search -->
        <div class="content-card fade-in-up">
            <div class="card-header">
                <div class="d-flex justify-content-between align-items-center flex-wrap gap-3">
                    <h5 class="mb-0">
                        <i class="fas fa-filter me-2"></i>Filter Reviews
                    </h5>
                    <div class="d-flex gap-2">
                        <input type="text" class="form-control" placeholder="Search reviews..." @bind="searchQuery" @oninput="FilterReviews" style="width: 250px;">
                        <select class="form-select" @bind="selectedFilter" @bind:after="FilterReviews" style="width: auto;">
                            <option value="all">All Reviews</option>
                            <option value="recent">Recent (30 days)</option>
                            <option value="high-score">High Score (A-B)</option>
                            <option value="issues">With Issues</option>
                        </select>
                    </div>
                </div>
            </div>
        </div>

        <!-- History List -->
        <div class="content-card fade-in-up">
            <div class="card-header">
                <h5 class="mb-0">
                    <i class="fas fa-list me-2"></i>Recent Reviews (@filteredReviews.Count)
                </h5>
            </div>
            <div class="card-body">
                @if (filteredReviews.Any())
                {
                    @foreach (var review in filteredReviews)
                    {
                        <div class="history-item" @onclick="() => ViewReview(review)">
                            <div class="history-header">
                                <div class="d-flex justify-content-between align-items-start">
                                    <div class="flex-grow-1">
                                        <h6 class="history-title">
                                            <i class="fas fa-folder-open me-2"></i>
                                            @GetDisplayPath(review.RepoPath)
                                        </h6>
                                        <div class="history-meta">
                                            <span class="meta-item">
                                                <i class="fas fa-calendar me-1"></i>
                                                @review.CreatedAt.ToString("MMM dd, yyyy HH:mm")
                                            </span>
                                            <span class="meta-item">
                                                <i class="fas fa-file-code me-1"></i>
                                                @review.Summary.TotalFiles files
                                            </span>
                                            <span class="meta-item">
                                                <i class="fas fa-stopwatch me-1"></i>
                                                @review.Duration.TotalSeconds.ToString("F1")s
                                            </span>
                                        </div>
                                    </div>
                                    <div class="history-score">
                                        <div class="score-badge" style="@GetScoreColor(review.Summary.OverallScore)">
                                            @GetScoreGrade(review.Summary.OverallScore)
                                        </div>
                                    </div>
                                </div>
                            </div>
                            <div class="history-summary">
                                <div class="summary-stats">
                                    <div class="summary-stat">
                                        <span class="stat-number" style="color: #ff6b6b;">@review.Summary.CriticalIssues</span>
                                        <span class="stat-text">Critical</span>
                                    </div>
                                    <div class="summary-stat">
                                        <span class="stat-number" style="color: #ffd93d;">@review.Summary.HighIssues</span>
                                        <span class="stat-text">High</span>
                                    </div>
                                    <div class="summary-stat">
                                        <span class="stat-number" style="color: #4ecdc4;">@review.Summary.MediumIssues</span>
                                        <span class="stat-text">Medium</span>
                                    </div>
                                    <div class="summary-stat">
                                        <span class="stat-number" style="color: #95a5a6;">@review.Summary.LowIssues</span>
                                        <span class="stat-text">Low</span>
                                    </div>
                                </div>
                                @if (review.Summary.TopRecommendations.Any())
                                {
                                    <div class="top-recommendation">
                                        <i class="fas fa-lightbulb me-2"></i>
                                        @review.Summary.TopRecommendations.First()
                                    </div>
                                }
                            </div>
                        </div>
                    }
                }
                else
                {
                    <div class="empty-state">
                        <div class="empty-icon">
                            <i class="fas fa-history"></i>
                        </div>
                        <h5 class="text-white mb-2">No Review History</h5>
                        <p class="text-light mb-4">
                            @if (string.IsNullOrEmpty(searchQuery))
                            {
                                <text>You haven't performed any code reviews yet. Start your first review to see it here.</text>
                            }
                            else
                            {
                                <text>No reviews match your search criteria. Try adjusting your filters.</text>
                            }
                        </p>
                        <button class="btn btn-primary" @onclick="StartNewReview">
                            <i class="fas fa-plus me-2"></i>Start New Review
                        </button>
                    </div>
                }
            </div>
        </div>
    </div>
</div>

@code {
    private List<ReviewResult> allReviews = new();
    private List<ReviewResult> filteredReviews = new();
    private string searchQuery = "";
    private string selectedFilter = "all";

    // Mock statistics
    private int totalReviews = 47;
    private string avgScore = "B+";
    private int issuesFixed = 234;
    private int timeSaved = 156;

    protected override Task OnInitializedAsync()
    {
        LoadMockData();
        filteredReviews = allReviews;
        return Task.CompletedTask;
    }

    private void LoadMockData()
    {
        // In a real application, this would load from a database
        allReviews = new List<ReviewResult>
        {
            new ReviewResult
            {
                RepoPath = "C:\\Projects\\E-Commerce-Platform",
                CreatedAt = DateTime.Now.AddDays(-1),
                Duration = TimeSpan.FromSeconds(45.2),
                Summary = new ReviewSummary
                {
                    TotalFiles = 23,
                    TotalIssues = 8,
                    CriticalIssues = 1,
                    HighIssues = 2,
                    MediumIssues = 3,
                    LowIssues = 2,
                    OverallScore = "B+ (85%)",
                    TopRecommendations = new List<string> { "Consider implementing input validation for user forms" }
                },
                Reviews = new List<AI_Powered_Code_Review_Assistant.Models.Review>()
            },
            new ReviewResult
            {
                RepoPath = "C:\\Projects\\Customer-Management-API",
                CreatedAt = DateTime.Now.AddDays(-3),
                Duration = TimeSpan.FromSeconds(67.8),
                Summary = new ReviewSummary
                {
                    TotalFiles = 15,
                    TotalIssues = 12,
                    CriticalIssues = 2,
                    HighIssues = 4,
                    MediumIssues = 4,
                    LowIssues = 2,
                    OverallScore = "C+ (72%)",
                    TopRecommendations = new List<string> { "Add error handling for database operations" }
                },
                Reviews = new List<AI_Powered_Code_Review_Assistant.Models.Review>()
            },
            new ReviewResult
            {
                RepoPath = "C:\\Projects\\Mobile-App-Backend",
                CreatedAt = DateTime.Now.AddDays(-7),
                Duration = TimeSpan.FromSeconds(92.4),
                Summary = new ReviewSummary
                {
                    TotalFiles = 31,
                    TotalIssues = 3,
                    CriticalIssues = 0,
                    HighIssues = 1,
                    MediumIssues = 1,
                    LowIssues = 1,
                    OverallScore = "A- (92%)",
                    TopRecommendations = new List<string> { "Excellent code quality, minor performance optimizations suggested" }
                },
                Reviews = new List<AI_Powered_Code_Review_Assistant.Models.Review>()
            }
        };
    }

    private void FilterReviews()
    {
        filteredReviews = allReviews.Where(review =>
        {
            // Search filter
            if (!string.IsNullOrEmpty(searchQuery))
            {
                var searchLower = searchQuery.ToLower();
                if (!review.RepoPath.ToLower().Contains(searchLower))
                    return false;
            }

            // Category filter
            return selectedFilter switch
            {
                "recent" => review.CreatedAt >= DateTime.Now.AddDays(-30),
                "high-score" => review.Summary.OverallScore.StartsWith("A") || review.Summary.OverallScore.StartsWith("B"),
                "issues" => review.Summary.TotalIssues > 0,
                _ => true
            };
        }).ToList();

        StateHasChanged();
    }

    private string GetDisplayPath(string fullPath)
    {
        var parts = fullPath.Split(new[] { '\\', '/' }, StringSplitOptions.RemoveEmptyEntries);
        return parts.Length > 0 ? parts.Last() : fullPath;
    }

    private string GetScoreColor(string score) => score switch
    {
        var s when s.StartsWith("A") => "background: linear-gradient(135deg, #4ecdc4, #44a08d);",
        var s when s.StartsWith("B") => "background: linear-gradient(135deg, #4facfe, #00f2fe);",
        var s when s.StartsWith("C") => "background: linear-gradient(135deg, #ffd93d, #ff9f43);",
        var s when s.StartsWith("D") => "background: linear-gradient(135deg, #ff9f43, #ff6b6b);",
        _ => "background: linear-gradient(135deg, #ff6b6b, #ee5a52);"
    };

    private string GetScoreGrade(string score) => score.Split(' ')[0];

    private async Task ViewReview(ReviewResult review)
    {
        // Store the result in session state and navigate to results
        var resultJson = System.Text.Json.JsonSerializer.Serialize(review);
        await JSRuntime.InvokeVoidAsync("sessionStorage.setItem", "reviewResult", resultJson);
        Navigation.NavigateTo("/results");
    }

    private void StartNewReview()
    {
        Navigation.NavigateTo("/review");
    }
}